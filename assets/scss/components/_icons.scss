$tcon-size: 20px !default;
$tcon-transition: .3s !default;
$tcon-jstransform: 'tcon-transform' !default;
$tcon-menu-radius: ($tcon-size / 14) !default;
$tcon-menu-color: black !default;
$tcon-menu-arrowleft-transformation: (
	transform: scale3d(.8, .8, .8) rotate3d(0, 0, 1, 90deg)
) !default;
$tcon-menu-arrow360left-transformation: (
	transform: scale3d(.8, .8, .8) rotate3d(0, 0, 1, 360deg)
) !default;
.tcon {
  appearance: none;
  border: none;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  height: $tcon-size;
  transition: $tcon-transition;
  user-select: none;
  width: $tcon-size;
  background: transparent;

  > * {
    display: block;
  }

  &:focus {
    outline: none; // come back to this. styling needed still
  }
}


// Hide visually, but have it available for screen readers:
// https://github.com/grayghostvisuals/transformicons/issues/7#issuecomment-59813596
.tcon-visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &:active,
  &:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}
@mixin tcon-menu-lines {
  display: inline-block;
  height: ($tcon-size / 7);
  width: $tcon-size;
  border-radius: $tcon-menu-radius;
  transition: $tcon-transition;
  background: $tcon-menu-color;
}

.tcon-menu__lines {
  @include tcon-menu-lines;
  position: relative;

  &::before,
  &::after {
    @include tcon-menu-lines;
    content: '';
    position: absolute;
    left: 0;
    transform-origin: ($tcon-size / 14) center;
    width: 100%;
  }

  &::before {
    top: ($tcon-size / 4);
  }

  &::after {
    top: -($tcon-size / 4);
  }

  .#{$tcon-jstransform} & {
    transform: scale3d(.8, .8, .8);
  }
}
.tcon-menu--xbutterfly {
  width: auto;

  .tcon-menu__lines {
    &::before,
    &::after {
      transform-origin: 50% 50%;
      transition: top .3s .6s ease, transform .3s ease;
    }
  }

  &.#{$tcon-jstransform} {
    .tcon-menu__lines {
      background: transparent;

      &::before,
      &::after {
        top: 0;
        transition: top .3s ease, transform .3s .5s ease;
        width: $tcon-size;
      }

      &::before {
        transform: rotate3d(0, 0, 1, 45deg);
      }

      &::after {
        transform: rotate3d(0, 0, 1, -45deg);
      }
    }
  }
}

.tcon-menu--xcross {
  width: auto;

  &.#{$tcon-jstransform} {
    .tcon-menu__lines {
      background: transparent;

      &::before,
      &::after {
        transform-origin: 50% 50%;
        top: 0;
        width: $tcon-size;
      }

      &::before {
        transform: rotate3d(0, 0, 1, 45deg);
      }

      &::after {
        transform: rotate3d(0, 0, 1, -45deg);
      }
    }
  }
}

// @mixin rotate($degrees) {
//     -webkit-transform: rotate($degrees);
//     -moz-transform: rotate($degrees);
//     -ms-transform: rotate($degrees);
//     -o-transform: rotate($degrees);
//     transform: rotate($degrees);
// }

// @mixin chevron($cDirection:"right", $cSize: 8px, $cWidth: 1px, $cColor: black) {

//   display: inline-block;
//   width: $cSize;
//   height: $cSize;
//   border-top: 1px solid $cColor;
//   border-right: 1px solid $cColor;
//   border-width: $cWidth;

//   @if $cDirection == 'top'    { @include rotate(-45deg);}
//   @if $cDirection == 'right'  { @include rotate(45deg);}
//   @if $cDirection == 'bottom' { @include rotate(135deg);}
//   @if $cDirection == 'left'   { @include rotate(225deg);}

// }


// .arrow.arrow--top {
//   @include chevron('top');
// }

// .arrow.arrow--right {
//   @include chevron('right');
// }

// .arrow.arrow--bottom {
//   @include chevron('bottom');
// }

// .arrow.arrow--left {
//   @include chevron('left', 70px, 15px, #333);
//   box-shadow: 5px -5px 0 #FFF;
//   margin-top: 35px;
//   cursor: pointer;
//   transition: box-shadow 0.5s ease
//  }

// .arrow.arrow--left:hover {
//   box-shadow: 10px -10px 0 rgba(255,128,128,.5);
// }